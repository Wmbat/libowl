intf_libs = # Interface dependencies.
impl_libs = # Implementation dependencies.

import intf_libs += spdlog%lib{spdlog}
import intf_libs += range-v3%lib{range-v3}
import intf_libs += libreglisse%lib{reglisse}

lib{utils}: {hxx ixx txx cxx}{** -version} hxx{version} $impl_libs $intf_libs

# Include the generated version header into the distribution (so that we don't
# pick up an installed one) and don't remove it when cleaning in src (so that
# clean results in a state identical to distributed).
#
hxx{version}: in{version} $src_root/manifest
{
  dist  = true
  clean = ($src_root != $out_root)
}

hxx{export}@./: cxx.importable = false

# Build options.
#
cxx.poptions =+ "-I$out_root" "-I$src_root"

{hbmia obja}{*}: cxx.poptions += -DLIBUTILS_STATIC_BUILD
{hbmis objs}{*}: cxx.poptions += -DLIBUTILS_SHARED_BUILD

# Export options.
#
lib{utils}:
{
  cxx.export.poptions = "-I$out_root" "-I$src_root"
  cxx.export.libs = $intf_libs
}

liba{utils}: cxx.export.poptions += -DLIBUTILS_STATIC
libs{utils}: cxx.export.poptions += -DLIBUTILS_SHARED

# For pre-releases use the complete version to make sure they cannot be used
# in place of another pre-release or the final version. See the version module
# for details on the version.* variable values.
#
if $version.pre_release
  lib{utils}: bin.lib.version = @"-$version.project_id"
else
  lib{utils}: bin.lib.version = @"-$version.major.$version.minor"

# Install into the libutils/ subdirectory of, say, /usr/include/
# recreating subdirectories.
#
{hxx ixx txx}{*}:
{
  install         = include/libutils/
  install.subdirs = true
}
