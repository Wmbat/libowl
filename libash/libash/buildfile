intf_libs = # Interface dependencies.
impl_libs = # Implementation dependencies.

import intf_libs += libmannele%lib{mannele}
import intf_libs += libhawk%lib{hawk}
import intf_libs += Vulkan-Hpp%lib{Vulkan-Hpp}
import intf_libs += spdlog%lib{spdlog}
import intf_libs += magic_enum%lib{magic_enum}
import intf_libs += range-v3%lib{range-v3}

lib{ash}: {hxx ixx txx cxx}{** -version} hxx{version} $impl_libs $intf_libs

# 
#
if $use_x11
   cc.poptions += -DVK_USE_PLATFORM_XCB_KHR
elif $use_wayland
   cc.poptions += -DVK_USE_PLATFORM_WAYLAND_KHR

# Include the generated version header into the distribution (so that we don't
# pick up an installed one) and don't remove it when cleaning in src (so that
# clean results in a state identical to distributed).
#
hxx{version}: in{version} $src_root/manifest
{
  dist  = true
  clean = ($src_root != $out_root)
}

hxx{export}@./: cxx.importable = false

# Build options.
#
cxx.poptions =+ "-I$out_root" "-I$src_root"

{hbmia obja}{*}: cxx.poptions += -DLIBASH_STATIC_BUILD
{hbmis objs}{*}: cxx.poptions += -DLIBASH_SHARED_BUILD

# Export options.
#
lib{ash}:
{
  cxx.export.poptions = "-I$out_root" "-I$src_root"
  cxx.export.libs = $intf_libs
}

liba{ash}: cxx.export.poptions += -DLIBASH_STATIC
libs{ash}: cxx.export.poptions += -DLIBASH_SHARED

# For pre-releases use the complete version to make sure they cannot be used
# in place of another pre-release or the final version. See the version module
# for details on the version.* variable values.
#
if $version.pre_release
  lib{ash}: bin.lib.version = "-$version.project_id"
else
  lib{ash}: bin.lib.version = "-$version.major.$version.minor"

# Install into the libash/ subdirectory of, say, /usr/include/
# recreating subdirectories.
#
{hxx ixx txx}{*}:
{
  install         = include/libash/
  install.subdirs = true
}
